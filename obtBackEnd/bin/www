#!/usr/bin/env node

/**
 * Module dependencies.
 */
var MongoClient = require('mongodb').MongoClient;
var MongoUriPrd = "mongodb+srv://sw2019user:wm7kqyvQ8InSrM1e@cojba-nzup0.mongodb.net/test?retryWrites=true&w=majority";
var MongoUriDev = 'mongodb://localhost:27017';
var MongoUri = (process.env.production) ? MongoUriPrd : MongoUriDev;
var MongoDb = 'sw201902';
var MongoOption = { useNewUrlParser: true };
console.log(MongoUri);
MongoClient.connect(MongoUri, MongoOption, (err, conn) => {
    if (err) {
        console.log(err);
        process.exit(1);
    } else {
        console.log("ConecciÃ³n Exitosa a MongoDB");
    }
    var db = conn.db(MongoDb);

    var app = require('../app')(db);
    var debug = require('debug')('obtbackend:server');
    var http = require('http');

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '3001');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string' ?
            'Pipe ' + port :
            'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string' ?
            'pipe ' + addr :
            'port ' + addr.port;
        debug('Listening on ' + bind);
    }

}); // MongoConnect
